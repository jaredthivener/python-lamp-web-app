[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "python-lamp-web-app"
version = "0.1.0"
description = "An enhanced interactive lamp web application with 3D animations and effects"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
requires-python = ">=3.12"
dependencies = [
    "fastapi==0.115.14",
    "uvicorn[standard]==0.35.0",
    "jinja2==3.1.6",
    "python-multipart==0.0.20",
    "pydantic==2.10.3",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "httpx>=0.24.0",
    "black>=23.0.0",
    "ruff>=0.0.290",
    "mypy>=1.5.0",
]
security = [
    "bandit[toml]>=1.7.5",        # Security linter for Python
    "safety>=3.0.0",             # Checks for known security vulnerabilities
    "semgrep>=1.45.0",           # Advanced static analysis
    "pip-audit>=2.6.0",         # Audit Python packages for vulnerabilities
]

[project.urls]
Homepage = "https://github.com/jaredthivener/python-lamp-web-app"
Repository = "https://github.com/jaredthivener/python-lamp-web-app"
Issues = "https://github.com/jaredthivener/python-lamp-web-app/issues"

[project.scripts]
lamp-app = "src.main:main"

# Hatchling build configuration
[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.uv]
dev-dependencies = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "httpx>=0.24.0",
    "black>=23.0.0",
    "ruff>=0.0.290",
    "mypy>=1.5.0",
]

[tool.ruff]
target-version = "py312"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "S",  # bandit security rules
    "N",  # pep8-naming
    "T20", # flake8-print (avoid print statements)
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"src/__init__.py" = ["F401"]

[tool.black]
target-version = ['py312']
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
asyncio_mode = "auto"

# Security scanning configurations
[tool.bandit]
exclude_dirs = ["tests", ".venv", "build", "dist"]
skips = ["B101"]  # Skip assert_used test (common in tests)

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]

[tool.safety]
# Ignore specific vulnerabilities if needed (use with caution)
# ignore = ["12345"]
full_report = true

[tool.semgrep]
# Semgrep rules to include
rules = [
    "auto",  # Auto-detect language and apply relevant rules
    "security",
    "python",
]
